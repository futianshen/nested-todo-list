{"version":3,"sources":["style.tsx","components/todo/TodoList.tsx","components/todo/Todo.tsx","components/TodoForm.tsx","App.tsx","index.tsx"],"names":["ContainerMixin","css","StyledAddButton","styled","Button","StyledList","ol","TodoList","name","control","renderAddButton","renderTodo","useFieldArray","fields","prepend","remove","todo","className","map","field","index","id","StyledCheckbox","input","StyledTextInput","Todo","onRegister","onCheck","onRemove","children","type","onChange","e","placeholder","onClick","StyledSection","section","initialList","value","isDone","list","TodoForm","useForm","defaultValues","nestedList","register","getValues","setValue","handleSubmit","useToasts","setToast","handleSave","localStorage","setItem","JSON","stringify","text","parse","getItem","fieldId","forEach","_","subIndex","auto","subField","every","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAGMA,EAAiBC,YAAH,gEAKdC,EAAkBC,YAAOC,IAAPD,CAAH,yM,OCDfE,EAAaF,IAAOG,GAAV,kCACZN,GAmCWO,EAjBM,YAA2D,IAA/CC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,gBAAiBC,EAAc,EAAdA,WAC/D,EAAoCC,YAAc,CAAEJ,OAAMC,YAAlDI,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,OAEzB,OACE,4CACGL,QADH,IACGA,OADH,EACGA,GAAkB,SAACM,GAAD,OAAUF,EAAQE,MACpCL,GACC,cAACN,EAAD,CAAYY,UAAU,eAAtB,SACGJ,EAAOK,KAAI,SAACC,EAAuBC,GAAxB,OACVT,EAAWQ,EAAME,GAAID,GAAO,kBAAML,EAAOK,e,gBC5B/CE,EAAiBnB,IAAOoB,MAAV,6DAKdC,EAAkBrB,IAAOoB,MAAV,6CAIfE,EAOF,YAAwD,IAA5CC,EAA2C,EAA3CA,WAAYC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAM7C,OACE,+BACE,sBAAKZ,UAAU,+BAAf,UACE,cAACK,EAAD,yBACEQ,KAAK,YACDJ,EAAW,WAFjB,IAGEK,SAXmD,SAACC,GAChD,OAAVN,QAAU,IAAVA,KAAa,UAAUK,SAASC,GACzB,OAAPL,QAAO,IAAPA,WAWI,cAACH,EAAD,yBACEP,UAAU,aACNS,EAAW,UAFjB,IAGEI,KAAK,OACLG,YAAY,UAEd,cAAC,SAAD,CAAQC,QAASN,OAElBC,EACAA,GAAY,cAAC,IAAD,QAKnBJ,EAAKlB,SAAWA,EAEDkB,I,EAAAA,ICtCTU,EAAgBhC,IAAOiC,QAAV,kCACfpC,GAGEqC,EAA0B,CAC9B,CACEC,MAAO,eACPC,QAAQ,GAEV,CACED,MAAO,eACPC,QAAQ,EACRC,KAAM,CACJ,CACEF,MAAO,eACPC,QAAQ,GAEV,CACED,MAAO,eACPC,QAAQ,MAkIDE,EA5HM,WACnB,MACEC,YAAoB,CAClBC,cAAe,CACbC,WAAYP,KAHV5B,EAAR,EAAQA,QAASoC,EAAjB,EAAiBA,SAAUC,EAA3B,EAA2BA,UAAWC,EAAtC,EAAsCA,SAAUC,EAAhD,EAAgDA,aAMhD,EAAqBC,cAAZC,EAAT,oBAEMC,EAAaH,GAAa,SAACV,GAC/Bc,aAAaC,QAAQ,WAAYC,KAAKC,UAAUjB,EAAMM,aACtDM,EAAS,CAAEM,KAAM,QAAS1B,KAAM,eAWlC,OACE,eAACK,EAAD,CAAelB,UAAU,6BAAzB,UACE,eAAC,IAAD,CAAaA,UAAU,oBAAvB,UACE,cAAC,IAAD,CAAQiB,QAASiB,EAAjB,yBACA,cAAC,IAAD,CAAQjB,QAbK,WACjBa,EAAS,aAAcO,KAAKG,MAAML,aAAaM,QAAQ,aAAe,KACtER,EAAS,CAAEM,KAAM,SAAU1B,KAAM,eAW7B,yBACA,cAAC,IAAD,CAAQI,QAVM,WAClBa,EAAS,aAAc,IACvBG,EAAS,CAAEM,KAAM,WAQb,wBAGF,cAAC,EAAD,CACEhD,KAAK,aACLC,QAASA,EACTC,gBAAiB,SAACI,GAAD,OACf,eAAC,IAAD,CAAaG,UAAU,8BAAvB,UACE,cAAC,IAAD,CACEiB,QAAS,WACPpB,EAAQ,CACNwB,MAAO,GACPC,QAAQ,KAJd,oBAUA,cAAC,IAAD,CACEL,QAAS,kBACPpB,EAAQ,CACNwB,MAAO,GACPC,QAAQ,EACRC,KAAM,CAAC,CAAEF,MAAO,GAAIC,QAAQ,OALlC,yBAaJ5B,WAAY,SAACgD,EAASvC,EAAOQ,GAAjB,OACV,qBAAmBX,UAAU,OAA7B,SACE,cAAC,EAAD,CAEES,WAAY,SAAClB,GAAD,OAAUqC,EAAS,cAAD,OAAezB,EAAf,YAAwBZ,KACtDmB,QAAS,WAAO,IAAD,EACPX,EAAO8B,EAAU,cAAD,OAAe1B,IACrC,UAAAJ,EAAKwB,YAAL,SAAWoB,SAAQ,SAACC,EAAGC,GACrBf,EAAS,cAAD,OACQ3B,EADR,iBACsB0C,EADtB,WAEN9C,EAAKuB,YAIXX,SAAUA,EAZZ,SAcE,qBAAKX,UAAU,aAAf,SACE,cAAC,EAAKV,SAAN,CACEC,KAAI,qBAAgBY,EAAhB,SACJX,QAASA,EACTC,gBAAiB,SAACI,GAAD,OACf,cAACZ,EAAD,CACEgC,QAAS,WACPpB,EAAQ,CACNwB,MAAO,GACPC,QAAQ,KAEsC,IAA5CO,EAAU,cAAD,OAAe1B,EAAf,aACX2B,EAAS,cAAD,OAAe3B,EAAf,YAA+B,IAG3C2C,MAAI,EAVN,gBAeFpD,WAAY,SAACqD,EAAUF,EAAUlC,GAArB,OACV,qBAAoBX,UAAU,OAA9B,SACE,cAAC,EAAD,CACES,WAAY,SAAClB,GAAD,OACVqC,EAAS,cAAD,OACQzB,EADR,iBACsB0C,EADtB,YACkCtD,KAG5CmB,QAAS,WAGP,IADEmB,EAAU,cAAD,OAAe1B,EAAf,WAAgC,IAC3B6C,OAAM,SAACjD,GAAD,OAAUA,EAAKuB,UACnC,OAAOQ,EAAS,cAAD,OAAe3B,EAAf,YAA+B,GAEhD2B,EAAS,cAAD,OAAe3B,EAAf,YAA+B,IAEzCQ,SAAUA,KAfJoC,SAlCXL,IAFCA,UCxFLO,MARf,WACE,OACE,cAAC,IAAD,UACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.80220048.chunk.js","sourcesContent":["import { Button } from \"@geist-ui/react\"\nimport styled, { css } from \"styled-components\"\n\nconst ContainerMixin = css`\n  margin: 0 auto;\n  width: 500px;\n`\n\nconst StyledAddButton = styled(Button)`\n  &&& {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    padding: 0;\n    width: 33px;\n    height: 33px;\n  }\n`\n\nexport { ContainerMixin, StyledAddButton }\n","import { ReactElement } from \"react\"\nimport { useFieldArray } from \"react-hook-form\"\nimport { Control } from \"react-hook-form/dist/types/form\"\nimport styled from \"styled-components\"\nimport { ContainerMixin } from \"../../style\"\nimport { FormValues } from \"../../types/todo\"\n\nconst StyledList = styled.ol`\n  ${ContainerMixin}\n`\n\nconst TodoList: (props: {\n  name: \"nestedList\" | `nestedList.${number}.list`\n  control: Control<FormValues>\n  renderAddButton?: (\n    prepend: (todo: {\n      value: string\n      isDone: boolean\n      list?: { value: string; isDone: boolean }[]\n    }) => void\n  ) => ReactElement\n  renderTodo?: (\n    fieldId: string,\n    index: number,\n    onRemove: () => void\n  ) => ReactElement\n}) => ReactElement = function ({ name, control, renderAddButton, renderTodo }) {\n  const { fields, prepend, remove } = useFieldArray({ name, control })\n\n  return (\n    <>\n      {renderAddButton?.((todo) => prepend(todo as any))}\n      {renderTodo && (\n        <StyledList className=\"d-flex gap-3\">\n          {fields.map((field: { id: string }, index) =>\n            renderTodo(field.id, index, () => remove(index))\n          )}\n        </StyledList>\n      )}\n    </>\n  )\n}\n\nexport default TodoList\n","import { Divider } from \"@geist-ui/react\"\nimport { Delete } from \"@geist-ui/react-icons\"\nimport { ChangeEventHandler, ReactElement } from \"react\"\nimport { UseFormRegisterReturn } from \"react-hook-form/dist/types/form\"\nimport styled from \"styled-components\"\nimport { TodoList } from \"../../components/todo\"\n\nconst StyledCheckbox = styled.input`\n  width: 2rem;\n  height: 2rem;\n`\n\nconst StyledTextInput = styled.input`\n  height: 2rem;\n`\n\nconst Todo: ((props: {\n  onRegister: (name: \"isDone\" | \"value\") => UseFormRegisterReturn\n  onCheck?: () => void\n  onRemove?: () => void\n  children?: ReactElement\n}) => ReactElement) & {\n  TodoList: typeof TodoList\n} = function ({ onRegister, onCheck, onRemove, children }) {\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    onRegister?.(\"isDone\").onChange(e)\n    onCheck?.()\n  }\n\n  return (\n    <li>\n      <div className=\"flex items-center gap-3 mb-3\">\n        <StyledCheckbox\n          type=\"checkbox\"\n          {...onRegister(\"isDone\")}\n          onChange={handleChange}\n        />\n        <StyledTextInput\n          className=\"flex-grow\"\n          {...onRegister(\"value\")}\n          type=\"text\"\n          placeholder=\"todo\"\n        />\n        <Delete onClick={onRemove} />\n      </div>\n      {children}\n      {children && <Divider />}\n    </li>\n  )\n}\n\nTodo.TodoList = TodoList\n\nexport default Todo\n","import React from \"react\"\n// logic 複用\nimport { useForm } from \"react-hook-form\" // react hook\n\n// type 複用\nimport { FC } from \"react\" // from library type definition\nimport { FormValues, NestedList } from \"../types/todo\"\n\n// UI Component 複用\nimport { ButtonGroup, Button, useToasts } from \"@geist-ui/react\" // any ui library\nimport { Todo, TodoList } from \"../components/todo\"\n\n// 樣式 複用\nimport styled from \"styled-components\" // css in js\nimport { ContainerMixin, StyledAddButton } from \"../style\"\nconst StyledSection = styled.section`\n  ${ContainerMixin}\n`\n\nconst initialList: NestedList = [\n  {\n    value: \"todo group 2\",\n    isDone: true,\n  },\n  {\n    value: \"todo group 1\",\n    isDone: false,\n    list: [\n      {\n        value: \"group todo 2\",\n        isDone: false,\n      },\n      {\n        value: \"group todo 1\",\n        isDone: true,\n      },\n    ],\n  },\n]\n\nconst TodoForm: FC = function () {\n  const { control, register, getValues, setValue, handleSubmit } =\n    useForm<FormValues>({\n      defaultValues: {\n        nestedList: initialList,\n      },\n    })\n  const [, setToast] = useToasts()\n\n  const handleSave = handleSubmit((value) => {\n    localStorage.setItem(\"todoList\", JSON.stringify(value.nestedList))\n    setToast({ text: \"Saved\", type: \"success\" })\n  })\n  const handleLoad = () => {\n    setValue(\"nestedList\", JSON.parse(localStorage.getItem(\"todoList\") || \"\"))\n    setToast({ text: \"Loaded\", type: \"secondary\" })\n  }\n  const handleClear = () => {\n    setValue(\"nestedList\", [])\n    setToast({ text: \"Clear\" })\n  }\n\n  return (\n    <StyledSection className=\"flex flex-col items-center\">\n      <ButtonGroup className=\"d-flex gap-1 mx-0\">\n        <Button onClick={handleSave}>↑ Save</Button>\n        <Button onClick={handleLoad}>↓ Load</Button>\n        <Button onClick={handleClear}>X Clear</Button>\n      </ButtonGroup>\n\n      <TodoList\n        name=\"nestedList\"\n        control={control}\n        renderAddButton={(prepend) => (\n          <ButtonGroup className=\"d-flex justify-center gap-1\">\n            <Button\n              onClick={() => {\n                prepend({\n                  value: \"\",\n                  isDone: false,\n                })\n              }}\n            >\n              + Todo\n            </Button>\n            <Button\n              onClick={() =>\n                prepend({\n                  value: \"\",\n                  isDone: false,\n                  list: [{ value: \"\", isDone: false }],\n                })\n              }\n            >\n              + Group\n            </Button>\n          </ButtonGroup>\n        )}\n        renderTodo={(fieldId, index, onRemove) => (\n          <div key={fieldId} className=\"mb-2\">\n            <Todo\n              key={fieldId}\n              onRegister={(name) => register(`nestedList.${index}.${name}`)}\n              onCheck={() => {\n                const todo = getValues(`nestedList.${index}`)\n                todo.list?.forEach((_, subIndex) => {\n                  setValue(\n                    `nestedList.${index}.list.${subIndex}.isDone`,\n                    todo.isDone\n                  )\n                })\n              }}\n              onRemove={onRemove}\n            >\n              <div className=\"flex gap-1\">\n                <Todo.TodoList\n                  name={`nestedList.${index}.list`}\n                  control={control}\n                  renderAddButton={(prepend) => (\n                    <StyledAddButton\n                      onClick={() => {\n                        prepend({\n                          value: \"\",\n                          isDone: false,\n                        })\n                        if (getValues(`nestedList.${index}.isDone`) === true) {\n                          setValue(`nestedList.${index}.isDone`, false)\n                        }\n                      }}\n                      auto\n                    >\n                      +\n                    </StyledAddButton>\n                  )}\n                  renderTodo={(subField, subIndex, onRemove) => (\n                    <div key={subField} className=\"mb-2\">\n                      <Todo\n                        onRegister={(name) =>\n                          register(\n                            `nestedList.${index}.list.${subIndex}.${name}`\n                          )\n                        }\n                        onCheck={() => {\n                          const subTodoList =\n                            getValues(`nestedList.${index}.list`) || []\n                          if (subTodoList.every((todo) => todo.isDone)) {\n                            return setValue(`nestedList.${index}.isDone`, true)\n                          }\n                          setValue(`nestedList.${index}.isDone`, false)\n                        }}\n                        onRemove={onRemove}\n                      />\n                    </div>\n                  )}\n                />\n              </div>\n            </Todo>\n          </div>\n        )}\n      />\n    </StyledSection>\n  )\n}\n\nexport default TodoForm\n","import { GeistProvider } from \"@geist-ui/react\"\nimport TodoForm from \"./components/TodoForm\"\n\nfunction App() {\n  return (\n    <GeistProvider>\n      <TodoForm />\n    </GeistProvider>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}